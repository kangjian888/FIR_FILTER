// =============================================================================
// Filename: FIR_control.v
// Author: 
// Email: jkangac@connect.ust.hk
// Affiliation: Hong Kong University of Science and Technology
// Description:
// -----------------------------------------------------------------------------
module FIR_control (
	input clk,
	input rst_n,
	input [0:0] enable,
	input [3:0] tap_num,//0 indicates 1 tap, 15 indicates 16 taps
	input [0:0] mac_done, 
	input [0:0] configuration,//high effect
	output [0:0] done,//indicate ADC could provide new data to the filter 
	output [0:0] load_enable,
	output [0:0] add_enable,
	output [0:0] mac_1_enable, 
	output mac_2_enable, 
	output mac_3_enable, 
	output mac_4_enable,//for power saving
	output [0:0] config_enable		
);

//using a FSM as control module to give the control signal to calculation or configuration module
reg [4:0] state, next_state;

localparam 
IDLE = 6'b000001,
LOAD = 6'b000010,
CALCU = 6'b000100,
ADD = 6'b001000,
DONE = 6'b010000,
CONFIG = 6'b100000;


//States
always @ (*)
     begin
     	next_state = state;
        case (state)
            IDLE:
                begin
                	if (configuration == 1'b0) 
                	    begin
                    		if (enable) 
                    		    begin
                    		        next_state = LOAD;
                    		    end
                    		else 
                    		    begin
                    		        next_state = IDLE;
                    		    end
			    end
                    else
                    	begin
                    		next_state = CONFIG;
                    	end
                end
            LOAD:
                begin
                	if (configuration == 1'b0) 
                	    begin
                	        next_state = CALCU;
                	    end
                	else 
                	    begin
                	        next_state =  CONFIG;
                	    end
                end
            CALCU:
                begin
                    if(configuration == 1'b0)
                    	if (mac_done) 
                    	    begin
                    	        next_state = ADD;
                    	    end
                    	else 
                    	    begin
                    	        next_state = state;
                    	    end
                    else 
                        begin
                            next_state = CONFIG;
                        end
                end
            ADD:
            	begin
            		if (configuration == 1'b0) 
            		    begin
            		        next_state = CONFIG;
            		    end
            		else 
            		    begin
            		        next_state = DONE;
            		    end
            	end
            DONE:
                begin
                    if (configuration == 1'b0) 
                        begin
                            next_state =  IDLE;
                        end
                    else 
                        begin
                            next_state = CONFIG;
                        end
                end
            CONFIG:
                begin
                    if (configuration == 1'b0) 
                        begin
                            next_state = IDLE;
                        end
                    else 
                        begin
                            next_state = state;
                        end
                end
        endcase
     end

//Update state
always @ (posedge clk)
	begin
		if (!rst_n) 
		    begin
		      	state = IDLE;		  
		    end
		else 
		    begin
		        state = next_state;
		    end
	end
    
//Outputs
always @ (*) 
     begin
          case (state)
               IDLE:
               	    begin
                    	mac_1_enable = 1'b0;
                    	mac_2_enable = 1'b0;
                    	mac_3_enable = 1'b0;
                    	mac_4_enable = 1'b0;
                    	load_enable = 1'b0;
                    	add_enable = 1'b0;
                    	done = 1'b0;
                    	config_enable = 1'b0;
                    end
               LOAD:
               		begin
                     	mac_1_enable = 1'b0;
                    	mac_2_enable = 1'b0;
                    	mac_3_enable = 1'b0;
                    	mac_4_enable = 1'b0;
                    	load_enable = 1'b1;
                    	add_enable = 1'b0;
                    	done = 1'b0;
                    	config_enable = 1'b0;              			
               		end
               CALCU:
                    begin
                    	load_enable = 1'b0;
                    	add_enable = 1'b0;
                    	done = 1'b0;
                    	config_enable = 1'b0;
                    	if (tap_num[3]==1) 
                    	    begin
                    			mac_1_enable = 1'b1;
                    			mac_2_enable = 1'b1;
                    			mac_3_enable = 1'b1;
                    			mac_4_enable = 1'b1;                    	        
                    	    end
                    	else if(tap_num[3]==0 &&tap_num[2] == 1)
                    		begin
                    			mac_1_enable = 1'b1;
                    			mac_2_enable = 1'b1;
                    			mac_3_enable = 1'b1;
                    			mac_4_enable = 1'b0;
                    		end
                    	else if (tap_num[3]==0 && tap_num[2]==0 && tap_num[1]==1)
                    		begin
                        		mac_1_enable = 1'b1;
                    			mac_2_enable = 1'b1;
                    			mac_3_enable = 1'b0;
                    			mac_4_enable = 1'b0;
                    		end
                    	else 
                    	    begin
                    			mac_1_enable = 1'b1;
                    			mac_2_enable = 1'b0;
                    			mac_3_enable = 1'b0;
                    			mac_4_enable = 1'b0;
                    	    end

                    end
               ADD:
                    begin
                      	mac_1_enable = 1'b0;
                    	mac_2_enable = 1'b0;
                    	mac_3_enable = 1'b0;
                    	mac_4_enable = 1'b0;
                    	load_enable = 1'b0;
                    	add_enable = 1'b1;
                    	done = 1'b0;
                    	config_enable = 1'b0;                  
                    end
               DONE:
                    begin
                     	mac_1_enable = 1'b0;
                    	mac_2_enable = 1'b0;
                    	mac_3_enable = 1'b0;
                    	mac_4_enable = 1'b0;
                    	load_enable = 1'b0;
                    	add_enable = 1'b0;
                    	done = 1'b1;
                    	config_enable = 1'b0;                   
                    end
               CONFIG:
               		begin
                    	mac_1_enable = 1'b0;
                    	mac_2_enable = 1'b0;
                    	mac_3_enable = 1'b0;
                    	mac_4_enable = 1'b0;
                    	load_enable = 1'b0;
                    	add_enable = 1'b0;
                    	done = 1'b0;
                    	config_enable = 1'b1;               		            		
               		end
          endcase
     end

endmodule