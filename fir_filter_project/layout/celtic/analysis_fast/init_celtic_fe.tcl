# Generated by encounter version 14.26-s039_1
#
# Initialization CeltIC script for database from FE
#
set selectedNets ""
proc getVicNames { name } {
  global selectedNets
  set f [open $name r]
  while { [gets $f line ] >= 0} {
   lappend selectedNets $line
  }
}
set parm_verilog_escape_chars "\[\]/"
set parm_hier_sep /
set parm_case_sensitive $PARM_SENSITIVITY
if {[catch {eval $INS_PRE_TCL} msg]} {
  Puts "**ERROR: There was an error in executing setSIMode -insCeltICPreTcl settings."
  Puts $msg
  return
}
if {$USE_CTE} {set parm_timing 1}
eval $SetParmGtolCmd
eval $SetDelayUsePwlInputWaveCmd
eval $SetVirtualAttackerCmd
eval $SetAttackerSlewCmd
eval $SetOutputCmd
eval $SetGlitchCheckCmd
set_noise_run_mode -process $PROCESS -mode $EFFORT
if {$ILM_MODULE != ""} {eval $XILM_TGF}
if {$SET_SUPPLY_NETS != ""} {eval $SET_SUPPLY_NETS}
if {[catch {eval $INS_POST_NETLIST_TCL} msg]} {
  Puts "**ERROR: There was an error in executing setSIMode -insCeltICNetlistPostTcl settings."
  Puts $msg
  return
}

if {$UseDefaultLoadTiming} {
  if { [catch {
    foreach twfCmd $TWF_FILE { 
      set readCmd "read_twf -quiet $twfCmd"
      eval $readCmd
    }
  } msg ] } {
      Puts "**ERROR: Invalid command found in init_celtic_fe.tcl. Make sure to use correct version of init_celtic_fe.tcl. To be on safe side delete \"celtic\" folder and rerun."
    return
  }
} else {
  eval $LoadTimingCmd
}
eval $SetHazardFreeCmd
if {$SAVE_CDB || $SAVE_ECHO} {
   if {$SAVE_CDB} {
      save_cdb -file $parm_filename_prefix.cdb -name FIR \
       -vdd $VDD_NETS \
       -gnd $GND_NETS
   } elseif {$SAVE_ECHO} {
      save_echo -file FIR.echo -name FIR \
       -vdd $VDD_NETS \
       -gnd $GND_NETS
   }
}
if {$splitCeltIC >= 0} {
  eval getVicNames nets.name.$splitCeltIC
  set_parm skipprp 1
}
if {!$SIM_PATH} {
   set_thresh -glitch_peak $NOISE_THRESHOLD -delta_absolute $DELTA_ABSOLUTE
   if {$UseDefaultAnalyzeNoise} {
     if {$selectedNets == ""} {
       if {$skipHist} {
         analyze_noise -quiet_mode -delay -skiphist
       } else {
         analyze_noise -quiet_mode -delay
       }
     } else {
       analyze_noise -quiet_mode -delay -doonlynets $selectedNets
     }
   } else {
      eval $AnalyzeNoiseCmd
   }
   if {[catch {eval $INS_POST_TCL} msg]} {
     Puts "**ERROR: There was an error in executing setSIMode -insCeltICPostTcl settings."
     Puts $msg
     return
   }
   set reports_do_qa 1
   if {!$rdagMinimizeDiskUsage} {
     generate_report -sort_by noise
   } else {
     generate_report -sort_by noise -gzip > /dev/null
   }
   set reports_do_qa 0
   if {$UseDefaultReportEco} {
     if {$splitCeltIC >= 0} {
       report_eco -format fe	-filename_prefix celtic/celtic.$splitCeltIC
     } else {
       report_eco -format fe	
     }
   } else {
      eval $ReportEcoCmd
   }
   if {!$rdagMinimizeDiskUsage} {
    generate_report -sort_by sensitivity -slack -threshold 0.0 -text
    generate_report -delay max -threshold 0.0 -text
    generate_report -delay min -threshold 0.0 -text
   }
   if {$UseDefaultGenerateSdf} {
     if {$rdagMinimizeDiskUsage} {
       if {$splitCeltIC < 0} {
         generate_sdf -process_max $SDF_PROCESS -gzip -process_typ $SDF_PROCESS -process_min $SDF_PROCESS -file $parm_filename_prefix.incr.sdf.gz 
       } else {
         generate_sdf -process_max $SDF_PROCESS -gzip -process_typ $SDF_PROCESS -process_min $SDF_PROCESS -file $parm_filename_prefix.incr.$splitCeltIC.sdf.gz 
       }
   } else {
       generate_sdf -process_max $SDF_PROCESS -process_typ $SDF_PROCESS -process_min $SDF_PROCESS -file $parm_filename_prefix.incr.sdf 
   }
   } else {
      eval $GenerateSdfCmd
   }
   if {!$rdagMinimizeDiskUsage} {
     report_slew -format FE -incremental
    }
} else {
   if {$SIM_PATH_WITH_NOISE} {
      set_thresh -glitch_peak $NOISE_THRESHOLD -delta_absolute $DELTA_ABSOLUTE
      analyze_noise -quiet_mode -delay
   }
   if {$USE_CTE} {
      analyze_path 
   } else {
      analyze_path -commands $SIM_PATH_TCL 
   }
   if {[catch {eval $INS_POST_TCL} msg]} {
     Puts "**ERROR: There was an error in executing setSIMode -insCeltICPostTcl settings."
     Puts $msg
     return
   }
}
Puts "Finished CeltIC run at [clock format [ clock seconds]]"
